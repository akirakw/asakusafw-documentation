==============================
開発環境マイグレーションガイド
==============================

この文書では、Asakusa Framework のバージョンアップに伴う、開発環境のマイグレーション手順について解説します。

バージョン共通のマイグレーション手順
====================================

ここでは、各バージョン共通のマイグレーション手順について説明します。

..  attention::
    ここで説明する手順に加えて、マイグレーション先のバージョンや現在利用している環境によっては、後述する `バージョン固有のマイグレーション手順`_ が必要となる場合があるので必ずその内容も確認してください。

Gradleプロジェクトのマイグレーション
------------------------------------

Gradleベースのアプリケーションプロジェクトについては、以下のドキュメントを参照してマイグレーションを実施してください。

* :doc:`gradle-plugin` - :ref:`vup-gradle-plugin`

Mavenプロジェクトのマイグレーション
-----------------------------------

Mavenベースのアプリケーションプロジェクトについては、以下のドキュメンを参照してGradleプロジェクトへのマイグレーションを実施してください。

* :doc:`gradle-plugin` - :ref:`migrate-from-maven-to-gradle`

バージョン固有のマイグレーション手順
====================================

バージョン 0.8.1 へのマイグレーション
-------------------------------------

Asakusa Frameworkバージョン指定の非推奨化
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

バージョン 0.8.1 より、プロジェクトのビルドスクリプト ( :file:`build.gradle` ) でAsakusa Frameworkバージョンを指定することは非推奨となりました。

バージョン 0.7.6 より以前では、プロジェクトテンプレートに含まれるビルドスクリプトにAsakusa Frameworkバージョンの指定が含まれていました。
このため特にバージョン 0.7.6 以前に作成したプロジェクトについては、:doc:`gradle-plugin-v08-changes` - :ref:`gradle-plugin-v08-specify-asakusafw-version`
の説明を確認の上、ビルドスクリプトからAsakusa Frameworkバージョンの指定を削除するよう変更してください。

なお本バージョンより、ビルドスクリプトにAsakusa Frameworkバージョンの指定が含まれている場合にはビルド時に警告が表示されるようになりました。

Direct I/O lineの利用方法
~~~~~~~~~~~~~~~~~~~~~~~~~

:doc:`Direct I/O line <../directio/directio-line>` が試験的機能から正式機能に変更になったことに伴い、
Direct I/O lineは :doc:`SDKアーティファクト <sdk-artifact>` ``asakusa-sdk-directio`` に含まれるようになりました。
プロジェクトテンプレートから作成したプロジェクトでは、このライブラリは標準で利用可能になっています。

バージョン 0.8.0 以前では、このライブラリは ``com.asakusafw.sandbox:asakusa-directio-dmdl-ext`` に含まれていました。
このため、Direct I/O lineを利用するのみの目的でこのライブラリをビルドスクリプトに追加している場合、この定義は削除することができます。

バージョン 0.8.0 へのマイグレーション
-------------------------------------

..  warning::
    バージョン 0.8.0 は以前のバージョンからいくつかの重要な変更が行われました。
    マイグレーションを検討する際には必ず以下の内容を確認してください。

Java (JDK)
~~~~~~~~~~

Java6、およびJDK 6は非対応になりました。

Java6、およびJDK 6を利用している場合、Java 7(JDK 7)、またはJava8 (JDK 8)に移行する必要があります。

開発環境のJavaに関する設定については、以下のドキュメントを参照してください。

* :doc:`using-jdk`

Hadoop
~~~~~~

Hadoop1系は非対応となりました。

開発環境にHadoop1系をインストールしている場合、Hadoop2系をインストールしてAsakusa FrameworkからはHadoop2系を利用するよう設定してください。

開発環境にHadoop2系をインストールする方法については、以下のドキュメントを参照してください。

* :doc:`using-hadoop`

Gradle
~~~~~~

Gradleのバージョン1系は非対応になりました。

また、Asakusa Gradle Pluginにいくつか仕様変更が行われ、一部のタスクの動作やビルドスクリプトの設定方法が変更されています。

具体的なアプリケーションプロジェクトのマイグレーション手順については、以下のドキュメンを参照してください。

* :doc:`gradle-plugin-migration-guide` - :ref:`vup-gradle-plugin`

また、Asakusa Gradle Pluginの動作に関する変更内容や、Asakusa Framework バージョン 0.6系, 0.7系 からのビルドスクリプトの移行方法については、以下のドキュメントを参照してください。

* :doc:`gradle-plugin-v08-changes`

..  attention::
    :doc:`gradle-plugin-v08-changes` には Asakusa Frameworkのバージョン体系の変更などの重要な内容が説明されているため、マイグレーション時には必ずこのドキュメントを確認してください。

Maven
~~~~~

Mavenの利用は非対応になりました。

Mavenを利用しているアプリケーションプロジェクトは、Gradleを利用するよう移行する必要があります。

Mavenベースのアプリケーションプロジェクトについては、以下のドキュメンを参照してGradleプロジェクトへのマイグレーションを実施してください。

* :doc:`gradle-plugin` - :ref:`migrate-from-maven-to-gradle`
